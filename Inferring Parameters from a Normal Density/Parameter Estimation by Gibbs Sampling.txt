### Estimating unknown parameters from a normal distribution by
### Gibbs Sampling

mu = NULL ### Unknown mean of normal distribution to be estimated
sigsq = NULL ### Unknown variance of normal distribution to estimate
y = c(18.37930974926,
      4.88775310805306,
      9.50779761872122,
      6.83170872950577,
      14.0451777084016,
      9.32029557692764,
      14.0079926077951,
      8.53302217987935,
      6.95393209803018,
      3.03074316210239,
      10.4083360812306,
      8.22284414772784,
      4.12509880293995,
      9.7117698260924,
      21.0780754314079,
      12.2519551323014,
      12.5247940712691,
      6.11836165872085,
      15.6630942461564,
      8.50590231202507,
      4.76266018941267,
      6.20306721693455,
      9.95393097751635,
      17.7973510355918,
      6.84219798016638,
      6.57420551490494,
      22.7842827876003,
      15.2556282189003,
      11.7811389512726,
      0.279915902096447,
      5.25164382507256,
      13.7971443074177,
      14.8110886466859,
      4.34927835440196,
      11.1507334981378,
      20.7310550973808,
      14.9635099745567,
      10.4880578789661,
      11.4768127984974,
      13.0425070862254,
      15.541956331673,
      12.8646032139891,
      9.9634905595079)
y_bar = mean(y)
### First, we find the lag and burn-in iterations

### Start at (2,2)
mu[1] = 2
sigsq[1] = 2

for(i in 1:500){
  mu[i+1] = rnorm(1, y_bar, (sqrt(sigsq[i]/43)))
  sigsq[i+1] = 1/(rgamma(1, 21.5, (.5*(42*var(y) + 43*(y_bar-mu[i+1])^2))))
}

### Use ts.plot for mu and sigsq to find the burn-in iterations, given the starting value is (2,2)
par(mfrow=c(2,2))
ts.plot(mu[1:20], xlab="Iterations")
### Figure 1

ts.plot(sigsq[1:20], xlab= "Iterations")
### Figure 2

### From Figures 1 and 2, we find that an appropriate burn-in iterations would be 5

### Now, use an autocorrelation plot to determine lag

acf(mu)
### Figure 3

acf(sigsq)
### Figure 4

### From Figures 3 and 4, we find that we do not need any lag to avoid serial correlation



### Now, generate 25,000 draws from the marginal posteriors with a starting value of (2,2).  
mu1 = NULL
sigsq1 = NULL

mu1[1] = 2
sigsq1[1] = 2

for(i in 1:25005){
  mu1[i+1] = rnorm(1, y_bar, sqrt((sigsq[i]/43)))
  sigsq1[i+1] = 1/(rgamma(1, 21.5, (.5*(42*var(y) + 43*(y_bar-mu[i+1])^2))))
}

mu1= mu1[6:25005]
sigsq1 = sigsq1[6:25005] ### accounting for burn-in 

par(mfrow=c(2,2))
ts.plot(mu1[6:506],xlab="Iterations")
ts.plot(sigsq1[6:506], xlab="Iterations")
hist(mu1,probability=T)
hist(sigsq1,probability=T)

### Part b

quantile(mu1, probs = c(.025, .5, .95, .975), na.rm = TRUE) ### finds (b_1, b_2) such that P(b_1 < mu < b_2) = .95 with P(mu < b_1) = P(mu > b_2) = 0.025
     2.5%       50%       95%     97.5% 
 9.267032 10.794924 12.083273 12.268063

quantile(sigsq1, probs = c(.025, .5, .95, .975), na.rm = TRUE) ### finds (c_1, c_2) such that P(c_1 < sigsq < c_2) = .95 with P(sigsq < c_1) = P(sigsq > c_2) = .025
    2.5%      50%      95%    97.5% 
17.53338 26.05480 37.60620 41.89239 

quantile(mu1, probs = c(.005, .5, .99, .995), na.rm = TRUE) ### finds (b_1, b_2) such that P(b_1 < mu < b_2) = .99 with P(mu < b_1) = P(mu > b_2) = 0.005
     0.5%       50%       99%     99.5% 
 8.833774 10.794924 12.650352 13.002534 

quantile(sigsq1, probs = c(.005, .5, .99, .995), na.rm = TRUE) ### finds (c_1, c_2) such that P(c_1 < sigsq < c_2) = .99 with P(sigsq < c_1) = P(sigsq > c_2) = .005
    0.5%      50%      99%    99.5% 
15.60386 26.05480 44.92977 47.27583

### Part c

### So, the estimated value of the mean of the normal distribution in question is 10.8, and a 99% Bayesian credible interval is 8.83 and 13.00.
### Similarly, the estimated value of the variance of this normal distribution is 26.1, and a 99% Bayesian credible interval is 15.60 and 44.93.